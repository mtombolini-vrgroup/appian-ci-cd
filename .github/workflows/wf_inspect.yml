name: Inspeccionar paquete o aplicaci√≥n Appian

on:
  workflow_dispatch:
    inputs:
      package_name:
        description: "Nombre l√≥gico del paquete o aplicaci√≥n (correspondiente al nombre del ZIP en deployments/dev)"
        required: true
        type: string
      description:
        description: "Descripci√≥n de la inspecci√≥n"
        required: false
        type: string
      environment_name:
        description: "Nombre del entorno (qa, prod, etc.)"
        required: true
        type: string

  workflow_call:
    inputs:
      package_name:
        description: "Nombre l√≥gico del paquete o aplicaci√≥n (correspondiente al nombre del ZIP en deployments/dev)"
        required: true
        type: string
      description:
        description: "Descripci√≥n de la inspecci√≥n"
        required: false
        type: string
      environment_name:
        description: "Nombre del entorno (qa, prod, etc.)"
        required: true
        type: string
    secrets:
      API_KEY:
        required: true

jobs:
  inspeccionar:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment_name }}

    steps:
      - name: Checkout del repositorio
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Descargar artefacto exportado
        uses: actions/download-artifact@v4
        with:
          name: app-${{ inputs.package_name }}
          path: deployments/dev

      - name: Validar URL
        run: |
          if [ -z "${{ vars.URL }}" ]; then
            echo "‚ùå Error: URL no est√° definido."
            exit 1
          fi

      - name: Verificar existencia del paquete
        run: |
          echo "Verificando existencia del archivo deployments/dev/${{ inputs.package_name }}.zip"
          if [ ! -f "deployments/dev/${{ inputs.package_name }}.zip" ]; then
            echo "‚ùå El archivo no existe: deployments/dev/${{ inputs.package_name }}.zip"
            exit 1
          fi

      - name: Ejecutar inspecci√≥n en Appian en ${{ inputs.environment_name }}
        run: |
          curl --location --request POST "${{ vars.URL }}/suite/deployment-management/v2/inspections" \
          --header "appian-api-key: ${{ secrets.API_KEY }}" \
          --form 'json={
            "packageFileName": "${{ inputs.package_name }}.zip"
          }' \
          --form "packageFileName=@deployments/dev/${{ inputs.package_name }}.zip" \
          --output inspection_response.json

      - name: Verificar respuesta cruda de inspecci√≥n
        run: |
          echo "üîç Contenido de inspection_response.json:"
          cat inspection_response.json

      - name: Extraer UUID de la inspecci√≥n
        id: extract_uuid
        run: |
          inspection_uuid=$(jq -r '.uuid' inspection_response.json)
          echo "UUID de inspecci√≥n: $inspection_uuid"
          echo "inspection_uuid=$inspection_uuid" >> $GITHUB_OUTPUT

      - name: Consultar resultado de la inspecci√≥n
        run: |
          status="IN_PROGRESS"
          while [ "$status" == "IN_PROGRESS" ]; do
            sleep 10
            response=$(curl --location --request GET "${{ vars.URL }}/suite/deployment-management/v2/inspections/${{ steps.extract_uuid.outputs.inspection_uuid }}" \
            --header "appian-api-key: ${{ secrets.API_KEY }}")
            status=$(echo $response | jq -r '.status')
            echo "Estado actual de la inspecci√≥n: $status"
          done
          if [ "$status" != "COMPLETED" ]; then
            echo "La inspecci√≥n termin√≥ con estado: $status"
            exit 1
          fi

          # Validar si hubo errores de inspecci√≥n
          total_errors=$(curl --location --request GET "${{ vars.URL }}/suite/deployment-management/v2/inspections/${{ steps.extract_uuid.outputs.inspection_uuid }}" \
            --header "appian-api-key: ${{ secrets.API_KEY }}" | jq -r '.summary.problems.totalErrors')

          echo "Errores encontrados en la inspecci√≥n: $total_errors"

          if [ "$total_errors" != "0" ]; then
            echo "‚ùå La inspecci√≥n contiene errores. Mostrando detalle completo:"
            curl --location --request GET "${{ vars.URL }}/suite/deployment-management/v2/inspections/${{ steps.extract_uuid.outputs.inspection_uuid }}" \
              --header "appian-api-key: ${{ secrets.API_KEY }}" | jq .
            echo "‚ùå Deteniendo el workflow."
            exit 1
          fi

      - name: Mostrar detalle completo de la inspecci√≥n
        if: always()
        run: |
          curl --location --request GET "${{ vars.URL }}/suite/deployment-management/v2/inspections/${{ steps.extract_uuid.outputs.inspection_uuid }}" \
          --header "appian-api-key: ${{ secrets.API_KEY }}" | jq .