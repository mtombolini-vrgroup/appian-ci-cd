name: Exportar paquete Appian (reutilizable)

on:
  workflow_call:
    inputs:
      package_name:
        required: false
        type: string
      application_uuid:
        required: false
        type: string
      description:
        required: false
        type: string
      export_type:
        description: "Tipo de exportaci√≥n"
        required: false
        type: string
        default: package
    secrets:
      API_KEY:
        required: true
  workflow_dispatch:
    inputs:
      package_name:
        description: "Nombre l√≥gico del paquete (sin .zip)"
        required: false
        type: string
      application_uuid:
        description: "UUID de la aplicaci√≥n (solo para export_type=application)"
        required: false
        type: string
      description:
        description: "Descripci√≥n del paquete"
        required: false
        type: string
      export_type:
        description: "Tipo de exportaci√≥n"
        required: false
        type: choice
        options:
          - package
          - application
        default: package

jobs:
  export-package:
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Checkout del repositorio
        uses: actions/checkout@v4

      - name: Validar URL
        run: |
          if [ -z "${{ vars.URL }}" ]; then
            echo "‚ùå Error: URL no est√° definido."
            exit 1
          fi

      - name: Instalar dependencias
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Consultar paquetes de aplicaciones
        run: |
          echo "{}" > config/packages_result.json
          for row in $(jq -r 'to_entries|map("\(.key)=\(.value)")|.[]' config/apps_config.json); do
            app_name=$(echo $row | cut -d '=' -f 1)
            app_uuid=$(echo $row | cut -d '=' -f 2)
            echo "üîç Consultando paquetes para $app_name ($app_uuid)..."
            response=$(curl --silent --location --request GET "${{ vars.URL }}/suite/deployment-management/v2/applications/$app_uuid/packages" \
              --header "appian-api-key: ${{ secrets.API_KEY }}" \
              --header "Content-Type: application/json")

            if [ "$(echo "$response" | jq -r '.packages')" != "null" ]; then
              echo "$response" | jq -r --arg app "$app_name" '
                .packages | map({(.name): .uuid}) | add | {($app): .}
              ' > tmp.json

              jq -s 'add' config/packages_result.json tmp.json > merged.json
              mv merged.json config/packages_result.json
            else
              echo "‚ùå Error consultando $app_name. Respuesta:"
              echo "$response"
            fi
          done

      - name: Crear directorio para el paquete exportado
        run: mkdir -p "packages/${{ steps.definir_nombre_export.outputs.export_name }}"

      - name: Obtener UUID para exportaci√≥n
        id: obtener_uuid
        run: |
          if [ "${{ inputs.export_type }}" == "package" ]; then
            deployment_uuid=$(jq -r 'to_entries[] | .value as $app | select($app | has("${{ inputs.package_name }}")) | $app["${{ inputs.package_name }}"]' config/packages_result.json)
            echo "UUID de paquete resuelto: $deployment_uuid"
          else
            deployment_uuid="${{ inputs.application_uuid }}"
            echo "UUID de aplicaci√≥n recibido: $deployment_uuid"
          fi
          echo "deployment_uuid=$deployment_uuid" >> $GITHUB_OUTPUT

      - name: Definir nombre para exportaci√≥n
        id: definir_nombre_export
        run: |
          if [ "${{ inputs.export_type }}" == "package" ]; then
            export_name="${{ inputs.package_name }}"
          else
            export_name="Export App - ${{ inputs.application_uuid }}"
          fi
          echo "Nombre para exportaci√≥n: $export_name"
          echo "export_name=$export_name" >> $GITHUB_OUTPUT

      - name: Validar URL
        run: |
          if [ -z "${{ vars.URL }}" ]; then
            echo "‚ùå Error: URL no est√° definido."
            exit 1
          fi

      - name: Exportar paquete desde Appian Dev
        run: |
          curl --location --request POST "${{ vars.URL }}/suite/deployment-management/v2/deployments" \
          --header "appian-api-key: ${{ secrets.API_KEY }}" \
          --header "Action-Type: export" \
          --form 'json={
            "exportType": "${{ inputs.export_type }}",
            "uuids": ["${{ steps.obtener_uuid.outputs.deployment_uuid }}"],
            "name": "${{ steps.definir_nombre_export.outputs.export_name }}",
            "description": "${{ inputs.description }}"
          }' \
          --output export_response.json

      - name: Verificar respuesta cruda de exportaci√≥n
        run: |
          echo "üîç Contenido de export_response.json:"
          cat export_response.json

      - name: Extraer UUID de la exportaci√≥n
        id: extract_uuid
        run: |
          export_uuid=$(jq -r '.uuid' export_response.json)
          echo "UUID de exportaci√≥n: $export_uuid"
          echo "export_uuid=$export_uuid" >> $GITHUB_OUTPUT

      - name: Esperar a que la exportaci√≥n se complete
        run: |
          status="IN_PROGRESS"
          while [ "$status" == "IN_PROGRESS" ]; do
            sleep 10
            response=$(curl --location --request GET "${{ vars.URL }}/suite/deployment-management/v2/deployments/${{ steps.extract_uuid.outputs.export_uuid }}" \
            --header "appian-api-key: ${{ secrets.API_KEY }}")
            status=$(echo $response | jq -r '.status')
            echo "Estado actual: $status"
          done
          if [ "$status" != "COMPLETED" ]; then
            echo "La exportaci√≥n fall√≥ con estado: $status"
            exit 1
          fi

      - name: Descargar paquete exportado
        run: |
          package_url=$(curl --location --request GET "${{ vars.URL }}/suite/deployment-management/v2/deployments/${{ steps.extract_uuid.outputs.export_uuid }}" \
          --header "appian-api-key: ${{ secrets.API_KEY }}" | jq -r '.packageZip')
          curl --location --request GET "$package_url" \
          --header "appian-api-key: ${{ secrets.API_KEY }}" \
          --output "packages/${{ steps.definir_nombre_export.outputs.export_name }}/${{ steps.definir_nombre_export.outputs.export_name }}.zip"

      - name: Confirmar paquete exportado
        run: ls -lh "packages/${{ steps.definir_nombre_export.outputs.export_name }}"

      - name: Subir artefacto del paquete exportado
        uses: actions/upload-artifact@v4
        with:
          name: paquete-${{ steps.definir_nombre_export.outputs.export_name }}
          path: packages/${{ steps.definir_nombre_export.outputs.export_name }}/${{ steps.definir_nombre_export.outputs.export_name }}.zip

      - name: Guardar paquete en el repositorio
        run: |
          mkdir -p deployments/dev
          cp "packages/${{ steps.definir_nombre_export.outputs.export_name }}/${{ steps.definir_nombre_export.outputs.export_name }}.zip" "deployments/dev/${{ steps.definir_nombre_export.outputs.export_name }}.zip"

      - name: Hacer commit del paquete exportado
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add "deployments/dev/${{ steps.definir_nombre_export.outputs.export_name }}.zip"
          git commit -m "Add exported package ${{ steps.definir_nombre_export.outputs.export_name }}.zip"
          git push
