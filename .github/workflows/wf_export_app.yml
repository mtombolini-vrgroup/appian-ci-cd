

name: Exportar aplicaci√≥n Appian

on:
  workflow_call:
    inputs:
      application_uuid:
        required: true
        type: string
      description:
        required: false
        type: string
    secrets:
      API_KEY:
        required: true
  workflow_dispatch:
    inputs:
      application_uuid:
        description: "UUID de la aplicaci√≥n a exportar"
        required: true
        type: string
      description:
        description: "Descripci√≥n del export"
        required: false
        type: string

jobs:
  export_app:
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Checkout del repositorio
        uses: actions/checkout@v4

      - name: Validar URL
        run: |
          if [ -z "${{ vars.URL }}" ]; then
            echo "‚ùå Error: URL no est√° definido."
            exit 1
          fi

      - name: Exportar aplicaci√≥n desde Appian Dev
        run: |
          curl --location --request POST "${{ vars.URL }}/suite/deployment-management/v2/deployments" \
          --header "appian-api-key: ${{ secrets.API_KEY }}" \
          --header "Action-Type: export" \
          --form 'json={
            "exportType": "application",
            "uuids": ["${{ inputs.application_uuid }}"],
            "name": "Export App - ${{ inputs.application_uuid }}",
            "description": "${{ inputs.description }}"
          }' \
          --output export_response.json

      - name: Verificar respuesta cruda de exportaci√≥n
        run: |
              echo "üîç Contenido de export_response.json:"
              cat export_response.json

              # Extraer el UUID de la exportaci√≥n
              export_uuid=$(jq -r '.uuid' export_response.json)
              status=$(jq -r '.status' export_response.json)
              package_url=$(jq -r '.packageZip' export_response.json)

              if [ "$status" == "IN_PROGRESS" ] && [ -n "$export_uuid" ] && [ "$export_uuid" != "null" ]; then
                echo "‚úÖ Registrando UUID de la aplicaci√≥n en apps_config.json..."
                mkdir -p config
                if [ ! -f config/apps_config.json ]; then
                  echo "{}" > config/apps_config.json
                fi
                jq --arg uuid "${{ inputs.application_uuid }}" --arg export_uuid "$export_uuid" \
                  '.[$uuid] = { "export_uuid": $export_uuid } + (.[ $uuid ] // {})' \
                  config/apps_config.json > config/apps_config.tmp && mv config/apps_config.tmp config/apps_config.json
                echo "apps_config.json actualizado:"
                cat config/apps_config.json
              else
                echo "‚ùå Exportaci√≥n inv√°lida o sin packageZip. No se registrar√° el UUID de la aplicaci√≥n."
              fi package_url=$(jq -r '.packageZip' export_response.json)

              if [ -n "$export_uuid" ]; then
              echo "‚úÖ Registrando UUID en apps_config.json..."
              mkdir -p config
              if [ ! -f config/apps_config.json ]; then
                echo "{}" > config/apps_config.json
              fi
              jq --arg uuid "${{ inputs.application_uuid }}" --arg export_uuid "$export_uuid" \
                '.[$uuid] = { "export_uuid": $export_uuid } + (.[ $uuid ] // {})' \
                config/apps_config.json > config/apps_config.tmp && mv config/apps_config.tmp config/apps_config.json
              echo "apps_config.json actualizado:"
              cat config/apps_config.json
              else
              echo "‚ùå No se encontr√≥ export_uuid. No se registrar√° el UUID."
              fi

      - name: Extraer UUID de la exportaci√≥n
        id: extract_uuid
        run: |
          export_uuid=$(jq -r '.uuid' export_response.json)
          echo "UUID de exportaci√≥n: $export_uuid"
          echo "export_uuid=$export_uuid" >> $GITHUB_OUTPUT

      - name: Esperar a que la exportaci√≥n se complete
        run: |
          status="IN_PROGRESS"
          while [ "$status" == "IN_PROGRESS" ]; do
            sleep 10
            response=$(curl --location --request GET "${{ vars.URL }}/suite/deployment-management/v2/deployments/${{ steps.extract_uuid.outputs.export_uuid }}" \
            --header "appian-api-key: ${{ secrets.API_KEY }}")
            status=$(echo $response | jq -r '.status')
            echo "Estado actual: $status"
          done
          if [ "$status" != "COMPLETED" ]; then
            echo "La exportaci√≥n fall√≥ con estado: $status"
            exit 1
          fi

      - name: Descargar aplicaci√≥n exportada
        run: |
          package_url=$(curl --location --request GET "${{ vars.URL }}/suite/deployment-management/v2/deployments/${{ steps.extract_uuid.outputs.export_uuid }}" \
          --header "appian-api-key: ${{ secrets.API_KEY }}" | jq -r '.packageZip')

          echo "URL del packageZip: $package_url"

          if [ -z "$package_url" ] || [ "$package_url" == "null" ]; then
            echo "‚ùå No se encontr√≥ packageZip. La aplicaci√≥n fue exportada pero no hay ZIP disponible."
            exit 1
          fi

          mkdir -p "packages/Export App - ${{ inputs.application_uuid }}"
          curl --location --request GET "$package_url" \
          --header "appian-api-key: ${{ secrets.API_KEY }}" \
          --output "packages/Export App - ${{ inputs.application_uuid }}/Export App - ${{ inputs.application_uuid }}.zip"

      - name: Confirmar aplicaci√≥n exportada
        run: ls -lh "packages/Export App - ${{ inputs.application_uuid }}"

      - name: Subir artefacto de la aplicaci√≥n exportada
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ inputs.application_uuid }}
          path: packages/Export App - ${{ inputs.application_uuid }}/Export App - ${{ inputs.application_uuid }}.zip

      - name: Guardar aplicaci√≥n en el repositorio
        run: |
          mkdir -p deployments/dev
          cp "packages/Export App - ${{ inputs.application_uuid }}/Export App - ${{ inputs.application_uuid }}.zip" "deployments/dev/Export App - ${{ inputs.application_uuid }}.zip"

      - name: Hacer commit de la aplicaci√≥n exportada
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add "deployments/dev/Export App - ${{ inputs.application_uuid }}.zip"
          git commit -m "Add exported application Export App - ${{ inputs.application_uuid }}.zip"
          git push